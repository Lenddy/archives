/* learn in assignment 3 */
.assignment_3{
    color: red; /* change the color of the text */
    
    background-color:blue; /* change the color of the back ground */
    

    font-style: italic ;/* : change the styling of the text  */
    font-size: 100px ; /* : change the size of the text  */
    
    text-align:center; /* changes where the text will be align */
    
}

/* learn in assignment 4  in the box model*/
.assignment_4{
    
    margin: 10px;/* pushes other element away form the element that is ben use on  */
    
    padding: 10px;/* padding is filling in making the item appear to be bigger that what it actually is essentially taking more space */
    
    border: 10px solid black;/* border is the edge of the ite */
}

/* learn in assignment 5  in inline-block*/
.assignment_5{

    display: block;/*block: element always starts on a new line, and the browsers automatically add some space (a margin) before and after the element.  and always takes up the full width available */
    display: inline;/* inline :element does not start on a new line and only takes up as much width as necessary */

    display: inline-block;/*inline-block :Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element. the top and bottom margins/paddings are respected, but with display: inline they are not.Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements.*/

    vertical-align: top; /* The vertical-align property sets the vertical alignment of an element */
    
}

/* learn in assignment 6 in flex-box*/
.assignment_6{
    display: flex; /* ! The Flexible Box Layout Module, makes it easier to design flexible responsive layout structure */
    flex: 1; /*! flex calculates the amount of space that your items inside of your flex-box are going to take  */
    
    /*! if yo have different flex in side of you flex box the item in which the flex is declare will take that amount of space and leave the rest to the other items that flex was declare on */
/** for example if you declare that an item has a flex of 1(sidebar) and another has a flex of 3(main)  here you are saying that if  a sidebar would be (one fourth)1/4 of a main bar or, if */ 

/* todo: or you could say that if you want to crea a main you will have to add 4 sidebars together */

/* todo: or if you had a main you would need to divide the main into 4 pieces to create a side bar */
/* todo: of if there is a blank space the side bar would  receive 1/4 of that space and the main would receive 3/4  */

/** Imagine you have a pizza, and you want to share it with your friends. The "flex" property is like a way to decide how big each friend's slice of pizza will be. */
}


/* learn in assignment 7 flex on inner boxes and images*/
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
/*
 play flexbox froggy to practice flex box 
    and flexbox tower defense
*/
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
.assignment_7{
    justify-content: space-around; /*! align the inside of the flex box  horizontally */

    flex-wrap: wrap; 
    /*! determine if the children  tha are in the flex box of the item can go in to multiline  or not  */

    align-items: center; /*! align the items inside of the flex box  vertically */
}

/* learn in assignment 8 position*/
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */

/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
.assignment_8{
    position:absolute;   /*! defines  a definite place where an item lives on the screen it ,you remove it from the render order and you the item that it is cast on lives on a plane of its own and stops following the normal html rules */
    position:fixed ;/* ! keeps an items in a fixed position relative to your screen */
    position: relative;/*! place an item in an exact location determinen  relative to it parent */
}







